{"instanceClassId":1915,"assignedInstanceClassId":0,"instanceName":"com.cisco.dcbu.dcm.model.cfgtemplate.ConfigTemplate:name=custom_swift_issu:type=true","name":"custom_swift_issu","description":" Enhanced pre-post ISSU upgrade checks [BETA]","userDefined":true,"parameters":[{"name":"DUAL_SUP","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"No","validValues":"Yes,No"},"annotations":{"DisplayName":"Validate Active/Standby supervisor?","Description":"Select No to suppress dual supervisor check","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_VPC_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"Secondary","validValues":"NA,Primary,Secondary"},"annotations":{"DisplayName":"Upgrade switches with only this vPC role","Description":"Specify if Primary or Secondary vPC switch needs to be upgraded","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"UPTIME_LIMIT_DAYS","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"0","validValues":"0,1,2,7,14,30"},"annotations":{"DisplayName":"Kernel uptime threshold in (days)","Description":"Kernel uptime threshold in (days)","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"MTS_BUFFER_LIMIT","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"100","validValues":"50,100,250,500,1000,5000"},"annotations":{"DisplayName":"MTS buffer threshold","Description":"MTS buffer limit","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"INBAND_RATE_LIMIT","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"3000","validValues":"1000,2000,3000,4000,5000"},"annotations":{"DisplayName":"Inband Rate Limit","Description":"Inband Rate Limit","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_LCND_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"1000","validValues":"1000,2000,3000,4000,5000"},"annotations":{"DisplayName":"LCND drop threshold value?","Description":"LCND drop threshold","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"CPU_LOAD_LIMIT","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"3.0","validValues":"2.0,3.0,4.0,5.0,6.0"},"annotations":{"DisplayName":"CPU load limit","Description":"CPU load limit","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_ARP_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"5","validValues":"1,5,10,25"},"annotations":{"DisplayName":"Validate ARP: Max percentage of allowable incomplete ARPs","Description":"Validate ARP: Max percentage of allowable incomplete ARPs","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_OSPF_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"12","validValues":"0,12,24,72"},"annotations":{"DisplayName":"Validate OSPF: Stability verification time (hours)","Description":"Validate OSPF: Stability verification time (hours)","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_BGP_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"12","validValues":"0,12,24,72,360"},"annotations":{"DisplayName":"Validate BGP: Stability verification time (hours)","Description":"Validate BGP: Stability verification time (hours)","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_HSRP_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"12","validValues":"0,12,24,72,360"},"annotations":{"DisplayName":"Validate HSRP: Stability verification time (hours)","Description":"Validate HSRP: Stability verification time (hours)","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_PIM_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"12","validValues":"0,12,24,72,360"},"annotations":{"DisplayName":"Validate PIM: Stability verification time (hours)","Description":"Validate PIM: Stability verification time (hours)","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_STP_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"12","validValues":"0,12,24,72,360"},"annotations":{"DisplayName":"Validate STP: Stability verification time (hours)","Description":"Validate STP: Stability verification time (hours)","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"VALIDATE_SYSLOG_0","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"No","validValues":"Yes,No"},"annotations":{"DisplayName":"Check Syslog for SEV1/SEV2 events?","Description":"Check Syslog for SEV1/SEV2 events?","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"SUPPRESS_ALL_TEST_FAILURES","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"Yes","validValues":"Yes,No"},"annotations":{"DisplayName":"Suppress all test failures from blocking ISSU?","Description":"Prevent test failures from blocking ISSU","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false},{"name":"DETAILED_REPORT","description":null,"parameterType":"enum","metaProperties":{"defaultValue":"No","validValues":"Yes,No"},"annotations":{"DisplayName":"Do you want to execute a detailed report?","Description":"Detailed report?","IsMandatory":"true"},"structureParameters":{},"parameterTypeStructure":false,"defaultValue":null,"optional":false}],"tags":"","supportedPlatforms":"All","content":"##template properties\nname =custom_swift_issu;\ndescription = Enhanced pre-post ISSU upgrade checks [BETA];\ntags = ;\nuserDefined = true;\nsupportedPlatforms = All;\ntemplateType = REPORT;\ntemplateSubType = UPGRADE;\ncontentType = PYTHON;\nimplements = ;\ndependencies = ;\npublished = false;\nimports = ;\n##\n##template variables\n\n@(IsMandatory=true, Description=\"Select No to suppress dual supervisor check\",\n  DisplayName=\"Validate Active/Standby supervisor?\")\nenum DUAL_SUP {\n  validValues=Yes,No;\n  defaultValue=No;\n};\n\n@(IsMandatory=true, Description=\"Specify if Primary or Secondary vPC switch needs to be upgraded\",\n  DisplayName=\"Upgrade switches with only this vPC role\")\nenum VALIDATE_VPC_0 {\n  validValues=NA,Primary,Secondary;\n  defaultValue=Secondary;\n};\n\n@(IsMandatory=true, Description=\"Kernel uptime threshold in (days)\",\n  DisplayName=\"Kernel uptime threshold in (days)\")\nenum UPTIME_LIMIT_DAYS {\n  validValues=0,1,2,7,14,30;\n  defaultValue=0;\n};\n\n@(IsMandatory=true, Description=\"MTS buffer limit\",\n  DisplayName=\"MTS buffer threshold\")\nenum MTS_BUFFER_LIMIT {\n  validValues=50,100,250,500,1000,5000;\n  defaultValue=100;\n};\n\n@(IsMandatory=true, Description=\"Inband Rate Limit\",\n  DisplayName=\"Inband Rate Limit\")\nenum INBAND_RATE_LIMIT {\n  validValues=1000,2000,3000,4000,5000;\n  defaultValue=3000;\n};\n\n@(IsMandatory=true, Description=\"LCND drop threshold\",\n  DisplayName=\"LCND drop threshold value?\")\nenum VALIDATE_LCND_0 {\n  validValues=1000,2000,3000,4000,5000;\n  defaultValue=1000;\n};\n\n@(IsMandatory=true, Description=\"CPU load limit\",\n  DisplayName=\"CPU load limit\")\nenum CPU_LOAD_LIMIT {\n  validValues=2.0,3.0,4.0,5.0,6.0;\n  defaultValue=3.0;\n};\n\n@(IsMandatory=true, Description=\"Validate ARP: Max percentage of allowable incomplete ARPs\",\n  DisplayName=\"Validate ARP: Max percentage of allowable incomplete ARPs\")\nenum VALIDATE_ARP_0 {\n  validValues=1,5,10,25;\n  defaultValue=5;\n};\n\n@(IsMandatory=true, Description=\"Validate OSPF: Stability verification time (hours)\",\n  DisplayName=\"Validate OSPF: Stability verification time (hours)\")\nenum VALIDATE_OSPF_0 {\n  validValues=0,12,24,72;\n  defaultValue=12;\n};\n\n# @(IsMandatory=true, Description=\"Validate IS-IS: Stability verification time (hours)\",\n#   DisplayName=\"Validate ISIS: Stability verification time (hours)\")\n# enum VALIDATE_ISIS_0 {\n#   validValues=0,12,24,72;\n#   defaultValue=12;\n# };\n\n@(IsMandatory=true, Description=\"Validate BGP: Stability verification time (hours)\",\n  DisplayName=\"Validate BGP: Stability verification time (hours)\")\nenum VALIDATE_BGP_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Validate HSRP: Stability verification time (hours)\",\n  DisplayName=\"Validate HSRP: Stability verification time (hours)\")\nenum VALIDATE_HSRP_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Validate PIM: Stability verification time (hours)\",\n  DisplayName=\"Validate PIM: Stability verification time (hours)\")\nenum VALIDATE_PIM_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Validate STP: Stability verification time (hours)\",\n  DisplayName=\"Validate STP: Stability verification time (hours)\")\nenum VALIDATE_STP_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Check Syslog for SEV1/SEV2 events?\",\n  DisplayName=\"Check Syslog for SEV1/SEV2 events?\")\nenum VALIDATE_SYSLOG_0 {\n  validValues=Yes,No;\n  defaultValue=No;\n};\n\n# @(IsMandatory=true, Description=\"Shutdown LACP Fast mode interface prior to upgrade\",\n#   DisplayName=\"Shutdown LACP Fast mode interface prior to upgrade?\")\n# enum LACP_FAST_SHUT {\n#   validValues=Yes,No;\n#   defaultValue=No;\n# };\n\n@(IsMandatory=true, Description=\"Prevent test failures from blocking ISSU\",\n  DisplayName=\"Suppress all test failures from blocking ISSU?\")\nenum SUPPRESS_ALL_TEST_FAILURES {\n  validValues=Yes,No;\n  defaultValue=Yes;\n};\n\n@(IsMandatory=true, Description=\"Detailed report?\",\n  DisplayName=\"Do you want to execute a detailed report?\")\nenum DETAILED_REPORT {\n  validValues=Yes,No;\n  defaultValue=No;\n};\n\n##\n##template content\n__author__     = \"chrconlo, kmuruga2, radbalas and vijasamu\"\n__copyright__  = \"Copyright 2020, Cisco Systems\"\n__credits__    = [\"Chris Conlon\", \"Karthick Murugan\",\n               \"Radhakrishnan Balasubramanian\",\n               \"Vijay Wilson\", \"Pramod Nair\"]\n\n__version__    = \"1.0.36\"\n__maintainer__ = \"chrconlo\"\n__email__      = \"chrconlo@cisco.com\"\n__status__     = \"Development\"\n\n__license__ = \"\"\"\n################################################################################\n# Copyright (c) 2021 Cisco and/or its affiliates.\n#\n# This software is licensed to you under the terms of the Cisco Sample\n# Code License, Version 1.1 (the \"License\"). You may obtain a copy of the\n# License at\n#\n#                https://developer.cisco.com/docs/licenses\n#\n# All use of the material herein must be in accordance with the terms of\n# the License. All rights not expressly granted by the License are\n# reserved. Unless required by applicable law or agreed to separately in\n# writing, software distributed under the License is distributed on an \"AS\n# IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied.\n################################################################################\n\"\"\"\n\n\nimport sys\nimport collections\nimport json\nimport xml.etree.ElementTree as ET\n\nfrom datetime import datetime, timedelta\n\nfrom reportlib.preport import Report\nfrom reportlib.preport import Marker\nfrom reportlib.preport import Formatter\nfrom reportlib.preport import show\n\nfrom com.cisco.dcbu.vinci.rest.services.jython import InventoryWrapper\nfrom com.cisco.dcbu.vinci.rest.services.jython import WrappersResp\nfrom reportlib.preport import *\n\nfrom utility import *\n\n''' path to import swift library '''\n\nswift_lib_path11 = \"/var/lib/dcnm/jython-libs/reportlib/\"\nswift_lib_path12 = \"/opt/dcnm/appbin/jython-libs/reportlib/\"\n\ntry:\n    sys.path.append(swift_lib_path11)\nexcept Exception as e:\n    Logger.warn(\"failed to append lib swift_lib_path11 - \" + str(e))\n\ntry:\n    sys.path.append(swift_lib_path12)\nexcept Exception as e:\n    Logger.warn(\"failed to append lib swift_lib_path12 - \" + str(e))\n\nfrom swift_dcnm_lib import *\n\nclass GenericReportModel(object):\n    '''\n     Class implements model for executing cli on Generic,\n         cli parsing results and hosting validation functions\n\n    '''\n    def __init__(self, dictionaryObj, report):\n        Logger.info(\"GenericModel::init\")\n        self.dictionaryObj = dictionaryObj\n        self.report = report\n\n    def getValMap(self, func_name, pb):\n        Logger.info(\"GenericModel::getValMap\")\n        serial_number = self.dictionaryObj[\"serial_number\"]\n        for v in pb:\n            if v[\"func\"] == func_name:\n                Logger.info(\"getValMap::found dictionary::\" + str(v))\n                return v\n\n        Logger.warn(\"no validation found\")\n\n    def checkISSUPreUpgrade(self, step_results, pb):\n        Logger.info(\"GenericModel::checkISSUPreUpgrade\")\n        serial_number = self.dictionaryObj[\"serial_number\"]\n        precheck_section = self.report.add_section(\"Pre-ISSU check\", serial_number)\n        precheck_details = None\n        respObj = WrappersResp.getRespObj()\n        issu_pass = True\n\n        r_cnt = 0\n        for r in step_results:\n            func_name = r[\"name\"][\"func\"]\n            desc = r[\"name\"][\"desc\"]\n            Logger.info(\"*** \" + func_name + \":\" + desc + \" ***\")\n            ret = r[\"result\"]\n\n            if ret.result_code != 200 or ret.return_code != 200:\n                    Logger.warn(func_name + \" - did not pass validation check, do not pass\")\n                    issu_pass = False\n            else:\n                    Logger.info(func_name + \" - passed validation check\")\n\n            ''' build report elements '''\n            section_id = func_name\n            Logger.info(\"using section_id: \" + func_name)\n            section = self.report.add_section(desc + \" (\" + func_name + \")\", section_id)\n\n            section_det = {}\n            section_det[\"_id\"] = section_id\n            section_det[\"result_code\"] = ret.result_desc + \" \" + str(ret.result_code)\n            section_det[\"result_status\"] = ret.result_status\n            section_det[\"return_code\"] = ret.return_desc + \" \" + str(ret.return_code)\n\n            ''' resolve the error code to section marker label mapping '''\n            if ret.result_code == 200 and ret.return_code == 200:\n                try:\n                    section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.SUCCESS)\n                except Exception as e:\n                    Logger.info(\"no status in result - \" + str(e))\n\n            else:\n                if ret.result_code >= 500 or ret.return_code >= 500:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.WARNING)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n                if ret.result_code == 510 or ret.return_code == 510:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.ERROR)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n            ''' try and resolve the detailed section return info '''\n\n            try:\n                section_det[\"summary\"] = ret.summary\n            except Exception as e:\n                Logger.info(\"no summary in result - \" + str(e))\n\n            try:\n                section_det[\"condition\"] = ret.condition\n            except Exception as e:\n                Logger.info(\"no condition in result - \" + str(e))\n\n            section[\"Results\"] = section_det\n\n            try:\n                v = self.getValMap(func_name, pb)\n                section.append(\"validation_criteria\", {\"criteria\": str(v[\"criteria\"])},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no validation_criteria to append::\" + str(e))\n\n\n            ''' append mapped data to section '''\n\n            try:\n                section.append(\"current_snapshot\",  {\"payload\": json.dumps(ret.result_data)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no result_data to append\")\n\n            try:\n                section.append(\"pre_snapshot\", {\"payload\": json.dumps(ret.pre_snapshot)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no pre_snapshot to append\")\n\n            r_cnt += 1\n\n\n        if issu_pass == True:\n            Logger.info(\"--- issu pass condition ---\")\n            precheck_details={\n                    \"condition\":\"Upgrade allowed for switch\",\n                    \"status\": Formatter.add_marker(\"Passed\", Marker.SUCCESS),\n                    \"summary\": \"Upgrade allowed for switch\"\n            }\n            respObj.setSuccessRetCode()\n\n        elif issu_pass == False and SUPPRESS_ALL_TEST_FAILURES == \"Yes\":\n            Logger.info(\"--- issu fail condition, but suppress ---\")\n            precheck_details={\n                \"condition\":\"Switch failed Pre-ISSU checks, review detailed report\",\n                \"status\": Formatter.add_marker(\"Passed\", Marker.SUCCESS),\n                \"summary\": \"Condition(s) failed, however failure suppression enabled. Upgrade allowed for switch\"\n            }\n            respObj.setSuccessRetCode()\n\n        else:\n            Logger.info(\"--- issu fail condition ---\")\n            precheck_details={\n                \"condition\":\"Switch failed Pre-ISSU checks, review detailed report\",\n                \"status\": Formatter.add_marker(\"Failed\", Marker.ERROR),\n                \"summary\": \"Condition failed. Skipping ISSU\"\n            }\n            respObj.setFailureRetCode()\n\n        if precheck_details is not None:\n            precheck_details[\"_id\"] = serial_number\n            precheck_section[\"precheck\"] = precheck_details\n\n        respObj.setValue(self.report)\n        return respObj\n\n    def checkISSUPostUpgrade(self, step_results, pb):\n        Logger.info(\"GenericModel::checkISSUPostUpgrade\")\n        serial_number = self.dictionaryObj[\"serial_number\"]\n        precheck_section = self.report.add_section(\"Post-ISSU check\", serial_number)\n        precheck_details = None\n        respObj = WrappersResp.getRespObj()\n\n        issu_pass = True\n\n        r_cnt = 0\n        for r in step_results:\n            func_name = r[\"name\"][\"func\"]\n            desc = r[\"name\"][\"desc\"]\n            Logger.info(\"*** \" + func_name + \":\" + desc + \" ***\")\n            ret = r[\"result\"]\n\n            if ret.result_code != 200 or ret.return_code != 200:\n                    Logger.warn(func_name + \" - did not pass validation check, do not pass\")\n                    issu_pass = False\n            else:\n                    Logger.info(func_name + \" - passed validation check\")\n\n            ''' build report elements '''\n            section_id = func_name\n            Logger.info(\"using section_id: \" + func_name)\n            section = self.report.add_section(desc + \" (\" + func_name + \")\", section_id)\n\n            section_det = {}\n            section_det[\"_id\"] = section_id\n            section_det[\"result_code\"] = ret.result_desc + \" \" + str(ret.result_code)\n            section_det[\"result_status\"] = ret.result_status\n            section_det[\"return_code\"] = ret.return_desc + \" \" + str(ret.return_code)\n\n\n            ''' resolve the error code to section marker label mapping '''\n\n            if ret.result_code == 200 and ret.return_code == 200:\n                try:\n                    section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.SUCCESS)\n                except Exception as e:\n                    Logger.info(\"no status in result - \" + str(e))\n\n            else:\n                if ret.result_code >= 500 or ret.return_code >= 500:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.WARNING)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n                if ret.result_code == 510 or ret.return_code == 510:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.ERROR)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n            ''' try and resolve the detailed section return info '''\n\n            try:\n                section_det[\"summary\"] = ret.summary\n            except Exception as e:\n                Logger.info(\"no summary in result - \" + str(e))\n\n            try:\n                section_det[\"condition\"] = ret.condition\n            except Exception as e:\n                Logger.info(\"no condition in result - \" + str(e))\n\n\n            section[\"Results\"] = section_det\n\n            try:\n                v = self.getValMap(func_name, pb)\n                section.append(\"validation_criteria\", {\"criteria\": str(v[\"criteria\"])},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no validation_criteria to append::\" + str(e))\n\n            ''' append mapped data to section '''\n\n            try:\n                section.append(\"current_snapshot\",  {\"payload\": json.dumps(ret.result_data)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no result_data to append\")\n            try:\n                section.append(\"pre_snapshot\", {\"payload\": json.dumps(ret.pre_snapshot)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no pre_snapshot to append\")\n\n            r_cnt += 1\n\n        if issu_pass == True:\n            precheck_details={\n                    \"condition\":\"Upgrade check passed for switch \" + serial_number,\n                    \"status\": Formatter.add_marker(\"Passed\", Marker.SUCCESS),\n                    \"summary\": \"Upgrade check passed for switch \" + serial_number\n            }\n            respObj.setSuccessRetCode()\n\n        else:\n            precheck_details={\n                \"condition\":\"Switch failed Post-ISSU checks, review detailed report\",\n                \"status\": Formatter.add_marker(\"Failed\", Marker.ERROR),\n                \"summary\": \"Switch failed Post-ISSU checks, review detailed report\"\n            }\n            respObj.setSuccessRetCode()\n\n\n        if precheck_details is not None:\n            precheck_details[\"_id\"] = serial_number\n            precheck_section[\"precheck\"] = precheck_details\n\n        respObj.setValue(self.report)\n        return respObj\n\n\n\ndef checkPreUpgrade(model, playbook):\n    Logger.info(\"func checkPreUpgrade\")\n    nx = model\n    serial_number = nx.dict_obj[\"serial_number\"]\n    pb_results = []\n    ret = None\n    for validator in playbook:\n        try:\n            validator_desc = validator[\"desc\"]\n            ret = getattr(nx, nx.getOperTarget(validator[\"func\"]))(validator[\"params\"])\n            pb_results.append({\"name\": validator,\"desc\": validator_desc, \"result\": ret})\n        except Exception as e:\n            Logger.error(\"Exception in pre validation function - \" + str(validator) + \" - \" + str(e))\n\n    Logger.info(\"Pre validation function(s) execution complete\")\n    return pb_results\n\ndef checkPostUpgrade(model, playbook):\n    Logger.info(\"func checkPostUpgrade\")\n    nx = model\n    serial_number = nx.dict_obj[\"serial_number\"]\n    pb_results = []\n    ret = None\n    for validator in playbook:\n        try:\n            validator_desc = validator[\"desc\"]\n            ret = getattr(nx, nx.getOperTarget(validator[\"func\"]))(validator[\"params\"])\n            pb_results.append({\"name\": validator,\"desc\": validator_desc, \"result\": ret})\n        except Exception as e:\n            Logger.error(\"Exception in post validation function - \" + str(validator) + \" - \" + str(e))\n\n    Logger.info(\"Post validation function(s) execution complete\")\n    return pb_results\n\ndef checkISSUStatus(self, kickstart, system):\n    Logger.info(\"func checkISSUStatus\")\n    show_version = \"show version\"\n    cli_responses = show(serial_number, show_version)\n    for resp in cli_responses:\n        command = resp[\"command\"].strip()\n        Logger.info(command)\n        if show_version in command:\n            content = resp[\"response\"]\n            Logger.info(content)\n            if kickstart in content:\n                return True\n            elif system in content:\n                return True\n            else:\n                return False\n\ndef getPreIssuReport(dictionaryObj):\n    Logger.info(\"func getPreReport\")\n    prev_limit = 32\n    i = 1\n    sn = dictionaryObj[\"serial_number\"]\n    while i <= prev_limit:\n        try:\n            prev_reports = get_previous_reports(dictionaryObj, sn, i)\n            Logger.info(str(type(prev_reports)) + \", \" + str(len(prev_reports)))\n            j = 0\n            for prev_report in prev_reports:\n                Logger.info(str(prev_report) + \", \" + str(j))\n                if prev_report[\"tag\"] == \"PRE_ISSU\":\n                    Logger.info(\"found pre-check section of report\")\n                    return prev_report\n                else:\n                    Logger.info(\"report is not pre-issu\")\n                j += 1\n        except Exception as e:\n            Logger.error(\"failed to query report, \" + str(i) + \", \" + str(e))\n        i += 1\n    Logger.error(\"previous report count limit hit\")\n\n\ndef generateReport(dictionaryObj):\n    Logger.info(\"func generateReport\")\n    Logger.info(str(sys.version))\n    Logger.info(\"*** Swift for DCNM, version \" + __version__ + \" ***\")\n    Logger.info(\"Report dictionary object: {}\".format(dictionaryObj))\n    Logger.info(\"Tag: \" + tag)\n\n    user_params = {}\n\n\n    try:\n        user_params[\"DETAILED_REPORT\"] = DETAILED_REPORT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"SUPPRESS_ALL_TEST_FAILURES\"] = SUPPRESS_ALL_TEST_FAILURES\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"DUAL_SUP\"] = DUAL_SUP\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_VPC_0\"] = VALIDATE_VPC_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_ARP_0\"] = VALIDATE_ARP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_OSPF_0\"] = VALIDATE_OSPF_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_ISIS_0\"] = VALIDATE_ISIS_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_BGP_0\"] = VALIDATE_BGP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_HSRP_0\"] = VALIDATE_HSRP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_STP_0\"] = VALIDATE_STP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"UPTIME_LIMIT_DAYS\"] = UPTIME_LIMIT_DAYS\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"MTS_BUFFER_LIMIT\"] = MTS_BUFFER_LIMIT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"CPU_LOAD_LIMIT\"] = CPU_LOAD_LIMIT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_PIM_0\"]= VALIDATE_PIM_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"INBAND_RATE_LIMIT\"] = INBAND_RATE_LIMIT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_LCND_0\"] = VALIDATE_LCND_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_SYSLOG_0\"] = VALIDATE_SYSLOG_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"LACP_FAST_SHUT\"] = LACP_FAST_SHUT\n    except Exception as e:\n        Logger.warn(str(e))\n\n\n    user_params[\"PRE_POST_TAG\"] = tag\n\n    pre_issu_pb = [\n                    {\"func\": \"val_precheck\",\n                     \"desc\": \"Precheck\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for Cli responsiveness\", \"Kernel uptime check\"]\n                    },\n\n                    {\"func\": \"val_license_usage\",\n                     \"desc\": \"Validate License Usage\",\n                     \"params\": {},\n                     \"criteria\": [\"Check license usage, Honor or Expired\"]\n                    },\n\n                    {\"func\": \"val_log_logfile\",\n                     \"desc\": \"Validate Logging Logfile\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for Sev1/Sev2 log events\"]\n                    },\n\n                    {\"func\": \"val_sys_reset_reason\",\n                     \"desc\": \"Check previous reset-reasons\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_proc_cores\",\n                     \"desc\": \"Validate Process Cores\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for core files created in the last 30 days\"]\n                    },\n\n                    {\"func\": \"val_redundancy\",\n                     \"desc\": \"Validate Supervisor Redundancy\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if Active/Standby supervisors in SSO state\"]\n                    },\n\n                    {\"func\": \"val_inband_rate\",\n                     \"desc\": \"Validate Inband Rate\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if in-band packet rates are < \" \\\n                        + str(user_params[\"INBAND_RATE_LIMIT\"])]\n                    },\n\n                    {\"func\": \"val_lcnd_stats\",\n                     \"desc\": \"Validate LCND Stats\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if LCND stats has Rx/Tx drops > 100\"]\n                    },\n\n                    {\"func\": \"val_mod_exception\",\n                     \"desc\": \"Validate Module Exceptions\",\n                     \"params\": {},\n                     \"criteria\": [\"Validate show module and module exceptions\"]\n                    },\n\n                    {\"func\": \"val_gold\",\n                     \"desc\": \"Validate GOLD\",\n                     \"params\": {},\n                     \"criteria\": [\"Check module GOLD (Online diags have Failed)\"]\n                    },\n\n                    {\"func\": \"val_bootflash_health\",\n                     \"desc\": \"Validate Bootflash Health\",\n                     \"params\": {\"size\": \"2000\"},\n                     \"criteria\": [\"Check 2GB free and bootflash is RW\"]\n                    },\n\n                    {\"func\": \"val_system_resources\",\n                     \"desc\": \"Validate System Resources\",\n                     \"params\": {},\n                     \"criteria\": [\"Check CPU load < \" + user_params[\"CPU_LOAD_LIMIT\"] \\\n                        + \" and memory status OK\"]\n                    },\n\n                    {\"func\": \"val_mts_buffers\",\n                     \"desc\": \"Validate MTS Buffer Usage\",\n                     \"params\": {},\n                     \"criteria\": [\"Check each SAP has < \" + user_params[\"MTS_BUFFER_LIMIT\"] \\\n                        + \" entries in receive queue\"]\n                    },\n\n                    {\"func\": \"val_environment\",\n                     \"desc\": \"Validate Environment\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Fans, PSUs are not in failed state\"]\n                    },\n\n                    {\"func\": \"val_hw_ratelimiter\",\n                     \"desc\": \"Validate Hardware Rate-Limiter\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_copp\",\n                     \"desc\": \"Validate CoPP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_vpc\",\n                     \"desc\": \"Validate vPC\",\n                     \"params\": {},\n                     \"criteria\": [\"Check vPC peer-link\", \"Check vPC peer keepalive\",\n                        \"Check Pre/Post vPC status\"]\n                    },\n\n                    {\"func\": \"val_stp_tcn\",\n                     \"desc\": \"Validate STP Stability\",\n                     \"params\": {},\n                     \"criteria\": [\"Check all STP trees last TCN occurred > \" \\\n                        + user_params[\"VALIDATE_STP_0\"] + \" hrs\"]\n\n                    },\n\n                    {\"func\": \"val_stp_impact\",\n                     \"desc\": \"Validate STP Impact\",\n                     \"params\": {},\n                     \"criteria\": [\"Check STP impact results\"]\n                    },\n\n                    {\"func\": \"val_stp_trees\",\n                     \"desc\": \"Validate STP Trees\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post STP tree data\"]\n                    },\n\n                    {\"func\": \"val_hsrp\",\n                     \"desc\": \"Validate HSRP\",\n                     \"params\": {},\n                     \"criteria\": [\"Check HSRP Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_ospf_nbr\",\n                     \"desc\": \"Validate OSPF Neighbors\",\n                     \"params\": {},\n                     \"criteria\": [\"Check OSPF neighborships are up\", \"Validate OSPF Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_ospf_intf\",\n                     \"desc\": \"Validate OSPF Interfaces\",\n                     \"params\": {},\n                     \"criteria\": [\"Check OSPF Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_bgp\",\n                     \"desc\": \"Validate BGP\",\n                     \"params\": {},\n                     \"criteria\": [\"Check BGP neighborships are up\", \"Validate BGP Pre/Post state\"]\n                    },\n\n                    # {\"func\": \"val_isis\",\n                    #  \"desc\": \"Validate IS-IS\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    {\"func\": \"val_pim\",\n                     \"desc\": \"Validate PIM\",\n                     \"params\": {},\n                     \"criteria\": [\"Check PIM Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_bfd\",\n                     \"desc\": \"Validate BFD\",\n                     \"params\": {},\n                     \"criteria\": [\"Check BFD Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_lacp\",\n                     \"desc\": \"Validate LACP\",\n                     \"params\": {},\n                     \"criteria\": [\"Check LACP Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_nve\",\n                     \"desc\": \"Validate NVE\",\n                     \"params\": {},\n                     \"criteria\": [\"Check NVE interface Pre/Post\"]\n                    },\n\n                    {\"func\": \"val_arp\",\n                     \"desc\": \"Validate ARP Completion Ratio\",\n                     \"params\": {},\n                     \"criteria\": [\"Check ARP Incomplete/Complete ratio < \" \\\n                        + user_params[\"VALIDATE_ARP_0\"]]\n                    },\n\n                    {\"func\": \"val_udld\",\n                     \"desc\": \"Validate UDLD\",\n                     \"params\": {},\n                     \"criteria\": [\"Validate UDLD Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_intf\",\n                     \"desc\": \"Validate Show Interface\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post interface state\"]\n                    },\n\n                    {\"func\": \"val_intf_trunk\",\n                     \"desc\": \"Validate Show Interface Trunk\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post interface trunk state\"]\n                    },\n\n                    {\"func\": \"val_port_channel\",\n                     \"desc\": \"Validate Port-Channels\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post port-channel member state\"]\n                    },\n\n                    {\"func\": \"val_ipv4_route\",\n                     \"desc\": \"Validate v4 Routing\",\n                     \"params\": {},\n                     \"criteria\": [\"Check IPv4 Pre/Post Route/Path count\"]\n                    },\n\n                    {\"func\": \"val_ipv6_route\",\n                     \"desc\": \"Validate v6 Routing\",\n                     \"params\": {},\n                     \"criteria\": [\"Check IPv6 Pre/Post Route/Path count\"]\n                    },\n\n                    {\"func\": \"val_cdp_nbrs\",\n                     \"desc\": \"Validate CDP Neighbors\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post CDP neighbors\"]\n                    },\n\n                    {\"func\": \"val_kim_cc\",\n                     \"desc\": \"Validate KIM Consistency Checker\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if Kernel Interface Manager CC has passed\"]\n                    },\n\n                    # {\"func\": \"val_consistency\",\n                    #  \"desc\": \"Validate Consistency\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    # {\"func\": \"val_dme\",\n                    #  \"desc\": \"Validate DME\",\n                    #  \"params\": {},\n                    #  \"criteria\": [\"Check Pre/Post DME database\"]\n                    # },\n\n                    # {\"func\": \"run_lacp_fast_shut_no_shut\",\n                    #  \"desc\": \"Run LACP Fast Shutdown\",\n                    #  \"params\": {},\n                    #  \"criteria\": [\"Check for LACP fast mode interfaces and shutdown\"]\n                    # },\n\n\n    ]\n\n    post_issu_pb = [\n\n                   {\"func\": \"val_precheck\",\n                     \"desc\": \"Precheck\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"run_lacp_fast_shut_no_shut\",\n                     \"desc\": \"Run LACP Fast Shutdown\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for LACP fast mode interfaces and no shutdown\"]\n                    },\n\n                    {\"func\": \"val_license_usage\",\n                     \"desc\": \"Validate License Usage\",\n                     \"params\": {},\n                     \"criteria\": [\"Check license usage\"]\n                    },\n\n                    {\"func\": \"val_log_logfile\",\n                     \"desc\": \"Validate Logging Logfile\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_sys_reset_reason\",\n                     \"desc\": \"Validate Onboard Uptime\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_proc_cores\",\n                     \"desc\": \"Validate Process Cores\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_redundancy\",\n                     \"desc\": \"Validate Supervisor Redundancy\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_inband_rate\",\n                     \"desc\": \"Validate Inband Rate\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_lcnd_stats\",\n                     \"desc\": \"Validate LCND Stats\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_mod_exception\",\n                     \"desc\": \"Validate Module Exceptions\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_gold\",\n                     \"desc\": \"Validate GOLD\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_bootflash_health\",\n                     \"desc\": \"Validate Bootflash Health\",\n                     \"params\": {\"size\": \"2000\"},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_system_resources\",\n                     \"desc\": \"Validate System Resources\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_mts_buffers\",\n                     \"desc\": \"Validate MTS Buffer Usage\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_environment\",\n                     \"desc\": \"Validate Environment\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_hw_ratelimiter\",\n                     \"desc\": \"Validate Hardware Rate-Limiter\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_copp\",\n                     \"desc\": \"Validate CoPP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_vpc\",\n                     \"desc\": \"Validate vPC\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_stp_tcn\",\n                     \"desc\": \"Validate STP Stability\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_stp_impact\",\n                     \"desc\": \"Validate STP Impact\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_stp_trees\",\n                     \"desc\": \"Validate STP Trees\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_hsrp\",\n                     \"desc\": \"Validate HSRP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ospf_nbr\",\n                     \"desc\": \"Validate OSPF Neighbors\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ospf_intf\",\n                     \"desc\": \"Validate OSPF Interfaces\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_bgp\",\n                     \"desc\": \"Validate BGP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    # {\"func\": \"val_isis\",\n                    #  \"desc\": \"Validate IS-IS\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    {\"func\": \"val_pim\",\n                     \"desc\": \"Validate PIM\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_bfd\",\n                     \"desc\": \"Validate BFD\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_lacp\",\n                     \"desc\": \"Validate LACP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_nve\",\n                     \"desc\": \"Validate NVE\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_arp\",\n                     \"desc\": \"Validate ARP Completion Ratio\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_udld\",\n                     \"desc\": \"Validate UDLD\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_intf\",\n                     \"desc\": \"Validate Show Interface\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_intf_trunk\",\n                     \"desc\": \"Validate Show Interface Trunk\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_port_channel\",\n                     \"desc\": \"Validate Port-Channels\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ipv4_route\",\n                     \"desc\": \"Validate v4 Routing\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ipv6_route\",\n                     \"desc\": \"Validate v6 Routing\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_cdp_nbrs\",\n                     \"desc\": \"Validate CDP Neighbors\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_kim_cc\",\n                     \"desc\": \"Validate KIM Consistency Checker\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    # {\"func\": \"val_consistency\",\n                    #  \"desc\": \"Validate Consistency\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    # {\"func\": \"val_dme\",\n                    #  \"desc\": \"Validate DME\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    # {\"func\": \"run_lacp_fast_shut_no_shut\",\n                    #  \"desc\": \"Run LACP Fast Shutdown/Recovery\",\n                    #  \"params\": {},\n                    #  \"criteria\": [\"Check for LACP fast mode interfaces and no shutdown\"]\n                    # },\n\n    ]\n\n\n\n    if \"PRE_ISSU\" in tag:\n        report = Report(\"Pre-ISSU Report\")\n\n        Logger.info(\"pre-issu nxos reporting\")\n        nx = NXModel(dictionaryObj, report, user_params)\n        step_results = checkPreUpgrade(nx, pre_issu_pb)\n        Logger.info(str(step_results))\n\n        Logger.info(\"pre-issu generic reporting\")\n        grm = GenericReportModel(dictionaryObj, nx.report)\n        return grm.checkISSUPreUpgrade(step_results, pre_issu_pb)\n\n    elif \"POST_ISSU\" in tag:\n        report = Report(\"Post-ISSU Report\")\n\n        Logger.info(\"post-issu nxos reporting\")\n        pre_report = getPreIssuReport(dictionaryObj)\n\n        nx = NXModel(dictionaryObj, report, user_params, pre_report)\n        step_results = checkPostUpgrade(nx, post_issu_pb)\n        Logger.info(str(step_results))\n        Logger.info(\"post-issu generic reporting\")\n        grm = GenericReportModel(dictionaryObj, nx.report)\n        return grm.checkISSUPostUpgrade(step_results, post_issu_pb)\n\n    else:\n        Logger.error(\"Missing tag value for report creation\")\n        respObj = WrappersResp.getRespObj()\n        respObj.setFailureRetCode()\n        respObj.setValue(\"Missing tag value for report creation.\")\n        return respObj\n\n\ndef validate(context):\n    Logger.info(\"func validate\")\n    Logger.info(str(context))\n    respObj = WrappersResp.getRespObj()\n    #validation logic ahead of script operation\n    respObj.setSuccessRetCode()\n    return respObj\n##\n","newContent":"##template properties\nname =custom_swift_issu;\ndescription = Enhanced pre-post ISSU upgrade checks [BETA];\ntags = ;\nuserDefined = true;\nsupportedPlatforms = All;\ntemplateType = REPORT;\ntemplateSubType = UPGRADE;\ncontentType = PYTHON;\nimplements = ;\ndependencies = ;\npublished = false;\nimports = ;\n##\n##template variables\n\n@(IsMandatory=true, Description=\"Select No to suppress dual supervisor check\",\n  DisplayName=\"Validate Active/Standby supervisor?\")\nenum DUAL_SUP {\n  validValues=Yes,No;\n  defaultValue=No;\n};\n\n@(IsMandatory=true, Description=\"Specify if Primary or Secondary vPC switch needs to be upgraded\",\n  DisplayName=\"Upgrade switches with only this vPC role\")\nenum VALIDATE_VPC_0 {\n  validValues=NA,Primary,Secondary;\n  defaultValue=Secondary;\n};\n\n@(IsMandatory=true, Description=\"Kernel uptime threshold in (days)\",\n  DisplayName=\"Kernel uptime threshold in (days)\")\nenum UPTIME_LIMIT_DAYS {\n  validValues=0,1,2,7,14,30;\n  defaultValue=0;\n};\n\n@(IsMandatory=true, Description=\"MTS buffer limit\",\n  DisplayName=\"MTS buffer threshold\")\nenum MTS_BUFFER_LIMIT {\n  validValues=50,100,250,500,1000,5000;\n  defaultValue=100;\n};\n\n@(IsMandatory=true, Description=\"Inband Rate Limit\",\n  DisplayName=\"Inband Rate Limit\")\nenum INBAND_RATE_LIMIT {\n  validValues=1000,2000,3000,4000,5000;\n  defaultValue=3000;\n};\n\n@(IsMandatory=true, Description=\"LCND drop threshold\",\n  DisplayName=\"LCND drop threshold value?\")\nenum VALIDATE_LCND_0 {\n  validValues=1000,2000,3000,4000,5000;\n  defaultValue=1000;\n};\n\n@(IsMandatory=true, Description=\"CPU load limit\",\n  DisplayName=\"CPU load limit\")\nenum CPU_LOAD_LIMIT {\n  validValues=2.0,3.0,4.0,5.0,6.0;\n  defaultValue=3.0;\n};\n\n@(IsMandatory=true, Description=\"Validate ARP: Max percentage of allowable incomplete ARPs\",\n  DisplayName=\"Validate ARP: Max percentage of allowable incomplete ARPs\")\nenum VALIDATE_ARP_0 {\n  validValues=1,5,10,25;\n  defaultValue=5;\n};\n\n@(IsMandatory=true, Description=\"Validate OSPF: Stability verification time (hours)\",\n  DisplayName=\"Validate OSPF: Stability verification time (hours)\")\nenum VALIDATE_OSPF_0 {\n  validValues=0,12,24,72;\n  defaultValue=12;\n};\n\n# @(IsMandatory=true, Description=\"Validate IS-IS: Stability verification time (hours)\",\n#   DisplayName=\"Validate ISIS: Stability verification time (hours)\")\n# enum VALIDATE_ISIS_0 {\n#   validValues=0,12,24,72;\n#   defaultValue=12;\n# };\n\n@(IsMandatory=true, Description=\"Validate BGP: Stability verification time (hours)\",\n  DisplayName=\"Validate BGP: Stability verification time (hours)\")\nenum VALIDATE_BGP_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Validate HSRP: Stability verification time (hours)\",\n  DisplayName=\"Validate HSRP: Stability verification time (hours)\")\nenum VALIDATE_HSRP_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Validate PIM: Stability verification time (hours)\",\n  DisplayName=\"Validate PIM: Stability verification time (hours)\")\nenum VALIDATE_PIM_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Validate STP: Stability verification time (hours)\",\n  DisplayName=\"Validate STP: Stability verification time (hours)\")\nenum VALIDATE_STP_0 {\n  validValues=0,12,24,72,360;\n  defaultValue=12;\n};\n\n@(IsMandatory=true, Description=\"Check Syslog for SEV1/SEV2 events?\",\n  DisplayName=\"Check Syslog for SEV1/SEV2 events?\")\nenum VALIDATE_SYSLOG_0 {\n  validValues=Yes,No;\n  defaultValue=No;\n};\n\n# @(IsMandatory=true, Description=\"Shutdown LACP Fast mode interface prior to upgrade\",\n#   DisplayName=\"Shutdown LACP Fast mode interface prior to upgrade?\")\n# enum LACP_FAST_SHUT {\n#   validValues=Yes,No;\n#   defaultValue=No;\n# };\n\n@(IsMandatory=true, Description=\"Prevent test failures from blocking ISSU\",\n  DisplayName=\"Suppress all test failures from blocking ISSU?\")\nenum SUPPRESS_ALL_TEST_FAILURES {\n  validValues=Yes,No;\n  defaultValue=Yes;\n};\n\n@(IsMandatory=true, Description=\"Detailed report?\",\n  DisplayName=\"Do you want to execute a detailed report?\")\nenum DETAILED_REPORT {\n  validValues=Yes,No;\n  defaultValue=No;\n};\n\n##\n##template content\n__author__     = \"chrconlo, kmuruga2, radbalas and vijasamu\"\n__copyright__  = \"Copyright 2020, Cisco Systems\"\n__credits__    = [\"Chris Conlon\", \"Karthick Murugan\",\n               \"Radhakrishnan Balasubramanian\",\n               \"Vijay Wilson\", \"Pramod Nair\"]\n\n__version__    = \"1.0.36\"\n__maintainer__ = \"chrconlo\"\n__email__      = \"chrconlo@cisco.com\"\n__status__     = \"Development\"\n\n__license__ = \"\"\"\n################################################################################\n# Copyright (c) 2021 Cisco and/or its affiliates.\n#\n# This software is licensed to you under the terms of the Cisco Sample\n# Code License, Version 1.1 (the \"License\"). You may obtain a copy of the\n# License at\n#\n#                https://developer.cisco.com/docs/licenses\n#\n# All use of the material herein must be in accordance with the terms of\n# the License. All rights not expressly granted by the License are\n# reserved. Unless required by applicable law or agreed to separately in\n# writing, software distributed under the License is distributed on an \"AS\n# IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied.\n################################################################################\n\"\"\"\n\n\nimport sys\nimport collections\nimport json\nimport xml.etree.ElementTree as ET\n\nfrom datetime import datetime, timedelta\n\nfrom reportlib.preport import Report\nfrom reportlib.preport import Marker\nfrom reportlib.preport import Formatter\nfrom reportlib.preport import show\n\nfrom com.cisco.dcbu.vinci.rest.services.jython import InventoryWrapper\nfrom com.cisco.dcbu.vinci.rest.services.jython import WrappersResp\nfrom reportlib.preport import *\n\nfrom utility import *\n\n''' path to import swift library '''\n\nswift_lib_path11 = \"/var/lib/dcnm/jython-libs/reportlib/\"\nswift_lib_path12 = \"/opt/dcnm/appbin/jython-libs/reportlib/\"\n\ntry:\n    sys.path.append(swift_lib_path11)\nexcept Exception as e:\n    Logger.warn(\"failed to append lib swift_lib_path11 - \" + str(e))\n\ntry:\n    sys.path.append(swift_lib_path12)\nexcept Exception as e:\n    Logger.warn(\"failed to append lib swift_lib_path12 - \" + str(e))\n\nfrom swift_dcnm_lib import *\n\nclass GenericReportModel(object):\n    '''\n     Class implements model for executing cli on Generic,\n         cli parsing results and hosting validation functions\n\n    '''\n    def __init__(self, dictionaryObj, report):\n        Logger.info(\"GenericModel::init\")\n        self.dictionaryObj = dictionaryObj\n        self.report = report\n\n    def getValMap(self, func_name, pb):\n        Logger.info(\"GenericModel::getValMap\")\n        serial_number = self.dictionaryObj[\"serial_number\"]\n        for v in pb:\n            if v[\"func\"] == func_name:\n                Logger.info(\"getValMap::found dictionary::\" + str(v))\n                return v\n\n        Logger.warn(\"no validation found\")\n\n    def checkISSUPreUpgrade(self, step_results, pb):\n        Logger.info(\"GenericModel::checkISSUPreUpgrade\")\n        serial_number = self.dictionaryObj[\"serial_number\"]\n        precheck_section = self.report.add_section(\"Pre-ISSU check\", serial_number)\n        precheck_details = None\n        respObj = WrappersResp.getRespObj()\n        issu_pass = True\n\n        r_cnt = 0\n        for r in step_results:\n            func_name = r[\"name\"][\"func\"]\n            desc = r[\"name\"][\"desc\"]\n            Logger.info(\"*** \" + func_name + \":\" + desc + \" ***\")\n            ret = r[\"result\"]\n\n            if ret.result_code != 200 or ret.return_code != 200:\n                    Logger.warn(func_name + \" - did not pass validation check, do not pass\")\n                    issu_pass = False\n            else:\n                    Logger.info(func_name + \" - passed validation check\")\n\n            ''' build report elements '''\n            section_id = func_name\n            Logger.info(\"using section_id: \" + func_name)\n            section = self.report.add_section(desc + \" (\" + func_name + \")\", section_id)\n\n            section_det = {}\n            section_det[\"_id\"] = section_id\n            section_det[\"result_code\"] = ret.result_desc + \" \" + str(ret.result_code)\n            section_det[\"result_status\"] = ret.result_status\n            section_det[\"return_code\"] = ret.return_desc + \" \" + str(ret.return_code)\n\n            ''' resolve the error code to section marker label mapping '''\n            if ret.result_code == 200 and ret.return_code == 200:\n                try:\n                    section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.SUCCESS)\n                except Exception as e:\n                    Logger.info(\"no status in result - \" + str(e))\n\n            else:\n                if ret.result_code >= 500 or ret.return_code >= 500:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.WARNING)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n                if ret.result_code == 510 or ret.return_code == 510:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.ERROR)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n            ''' try and resolve the detailed section return info '''\n\n            try:\n                section_det[\"summary\"] = ret.summary\n            except Exception as e:\n                Logger.info(\"no summary in result - \" + str(e))\n\n            try:\n                section_det[\"condition\"] = ret.condition\n            except Exception as e:\n                Logger.info(\"no condition in result - \" + str(e))\n\n            section[\"Results\"] = section_det\n\n            try:\n                v = self.getValMap(func_name, pb)\n                section.append(\"validation_criteria\", {\"criteria\": str(v[\"criteria\"])},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no validation_criteria to append::\" + str(e))\n\n\n            ''' append mapped data to section '''\n\n            try:\n                section.append(\"current_snapshot\",  {\"payload\": json.dumps(ret.result_data)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no result_data to append\")\n\n            try:\n                section.append(\"pre_snapshot\", {\"payload\": json.dumps(ret.pre_snapshot)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no pre_snapshot to append\")\n\n            r_cnt += 1\n\n\n        if issu_pass == True:\n            Logger.info(\"--- issu pass condition ---\")\n            precheck_details={\n                    \"condition\":\"Upgrade allowed for switch\",\n                    \"status\": Formatter.add_marker(\"Passed\", Marker.SUCCESS),\n                    \"summary\": \"Upgrade allowed for switch\"\n            }\n            respObj.setSuccessRetCode()\n\n        elif issu_pass == False and SUPPRESS_ALL_TEST_FAILURES == \"Yes\":\n            Logger.info(\"--- issu fail condition, but suppress ---\")\n            precheck_details={\n                \"condition\":\"Switch failed Pre-ISSU checks, review detailed report\",\n                \"status\": Formatter.add_marker(\"Passed\", Marker.SUCCESS),\n                \"summary\": \"Condition(s) failed, however failure suppression enabled. Upgrade allowed for switch\"\n            }\n            respObj.setSuccessRetCode()\n\n        else:\n            Logger.info(\"--- issu fail condition ---\")\n            precheck_details={\n                \"condition\":\"Switch failed Pre-ISSU checks, review detailed report\",\n                \"status\": Formatter.add_marker(\"Failed\", Marker.ERROR),\n                \"summary\": \"Condition failed. Skipping ISSU\"\n            }\n            respObj.setFailureRetCode()\n\n        if precheck_details is not None:\n            precheck_details[\"_id\"] = serial_number\n            precheck_section[\"precheck\"] = precheck_details\n\n        respObj.setValue(self.report)\n        return respObj\n\n    def checkISSUPostUpgrade(self, step_results, pb):\n        Logger.info(\"GenericModel::checkISSUPostUpgrade\")\n        serial_number = self.dictionaryObj[\"serial_number\"]\n        precheck_section = self.report.add_section(\"Post-ISSU check\", serial_number)\n        precheck_details = None\n        respObj = WrappersResp.getRespObj()\n\n        issu_pass = True\n\n        r_cnt = 0\n        for r in step_results:\n            func_name = r[\"name\"][\"func\"]\n            desc = r[\"name\"][\"desc\"]\n            Logger.info(\"*** \" + func_name + \":\" + desc + \" ***\")\n            ret = r[\"result\"]\n\n            if ret.result_code != 200 or ret.return_code != 200:\n                    Logger.warn(func_name + \" - did not pass validation check, do not pass\")\n                    issu_pass = False\n            else:\n                    Logger.info(func_name + \" - passed validation check\")\n\n            ''' build report elements '''\n            section_id = func_name\n            Logger.info(\"using section_id: \" + func_name)\n            section = self.report.add_section(desc + \" (\" + func_name + \")\", section_id)\n\n            section_det = {}\n            section_det[\"_id\"] = section_id\n            section_det[\"result_code\"] = ret.result_desc + \" \" + str(ret.result_code)\n            section_det[\"result_status\"] = ret.result_status\n            section_det[\"return_code\"] = ret.return_desc + \" \" + str(ret.return_code)\n\n\n            ''' resolve the error code to section marker label mapping '''\n\n            if ret.result_code == 200 and ret.return_code == 200:\n                try:\n                    section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.SUCCESS)\n                except Exception as e:\n                    Logger.info(\"no status in result - \" + str(e))\n\n            else:\n                if ret.result_code >= 500 or ret.return_code >= 500:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.WARNING)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n                if ret.result_code == 510 or ret.return_code == 510:\n                    try:\n                        section_det[\"status\"] = Formatter.add_marker(str(ret.status), Marker.ERROR)\n                    except Exception as e:\n                        Logger.info(\"no status in result - \" + str(e))\n\n            ''' try and resolve the detailed section return info '''\n\n            try:\n                section_det[\"summary\"] = ret.summary\n            except Exception as e:\n                Logger.info(\"no summary in result - \" + str(e))\n\n            try:\n                section_det[\"condition\"] = ret.condition\n            except Exception as e:\n                Logger.info(\"no condition in result - \" + str(e))\n\n\n            section[\"Results\"] = section_det\n\n            try:\n                v = self.getValMap(func_name, pb)\n                section.append(\"validation_criteria\", {\"criteria\": str(v[\"criteria\"])},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no validation_criteria to append::\" + str(e))\n\n            ''' append mapped data to section '''\n\n            try:\n                section.append(\"current_snapshot\",  {\"payload\": json.dumps(ret.result_data)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no result_data to append\")\n            try:\n                section.append(\"pre_snapshot\", {\"payload\": json.dumps(ret.pre_snapshot)},\n                    str(serial_number))\n            except Exception as e:\n                Logger.info(\"no pre_snapshot to append\")\n\n            r_cnt += 1\n\n        if issu_pass == True:\n            precheck_details={\n                    \"condition\":\"Upgrade check passed for switch \" + serial_number,\n                    \"status\": Formatter.add_marker(\"Passed\", Marker.SUCCESS),\n                    \"summary\": \"Upgrade check passed for switch \" + serial_number\n            }\n            respObj.setSuccessRetCode()\n\n        else:\n            precheck_details={\n                \"condition\":\"Switch failed Post-ISSU checks, review detailed report\",\n                \"status\": Formatter.add_marker(\"Failed\", Marker.ERROR),\n                \"summary\": \"Switch failed Post-ISSU checks, review detailed report\"\n            }\n            respObj.setSuccessRetCode()\n\n\n        if precheck_details is not None:\n            precheck_details[\"_id\"] = serial_number\n            precheck_section[\"precheck\"] = precheck_details\n\n        respObj.setValue(self.report)\n        return respObj\n\n\n\ndef checkPreUpgrade(model, playbook):\n    Logger.info(\"func checkPreUpgrade\")\n    nx = model\n    serial_number = nx.dict_obj[\"serial_number\"]\n    pb_results = []\n    ret = None\n    for validator in playbook:\n        try:\n            validator_desc = validator[\"desc\"]\n            ret = getattr(nx, nx.getOperTarget(validator[\"func\"]))(validator[\"params\"])\n            pb_results.append({\"name\": validator,\"desc\": validator_desc, \"result\": ret})\n        except Exception as e:\n            Logger.error(\"Exception in pre validation function - \" + str(validator) + \" - \" + str(e))\n\n    Logger.info(\"Pre validation function(s) execution complete\")\n    return pb_results\n\ndef checkPostUpgrade(model, playbook):\n    Logger.info(\"func checkPostUpgrade\")\n    nx = model\n    serial_number = nx.dict_obj[\"serial_number\"]\n    pb_results = []\n    ret = None\n    for validator in playbook:\n        try:\n            validator_desc = validator[\"desc\"]\n            ret = getattr(nx, nx.getOperTarget(validator[\"func\"]))(validator[\"params\"])\n            pb_results.append({\"name\": validator,\"desc\": validator_desc, \"result\": ret})\n        except Exception as e:\n            Logger.error(\"Exception in post validation function - \" + str(validator) + \" - \" + str(e))\n\n    Logger.info(\"Post validation function(s) execution complete\")\n    return pb_results\n\ndef checkISSUStatus(self, kickstart, system):\n    Logger.info(\"func checkISSUStatus\")\n    show_version = \"show version\"\n    cli_responses = show(serial_number, show_version)\n    for resp in cli_responses:\n        command = resp[\"command\"].strip()\n        Logger.info(command)\n        if show_version in command:\n            content = resp[\"response\"]\n            Logger.info(content)\n            if kickstart in content:\n                return True\n            elif system in content:\n                return True\n            else:\n                return False\n\ndef getPreIssuReport(dictionaryObj):\n    Logger.info(\"func getPreReport\")\n    prev_limit = 32\n    i = 1\n    sn = dictionaryObj[\"serial_number\"]\n    while i <= prev_limit:\n        try:\n            prev_reports = get_previous_reports(dictionaryObj, sn, i)\n            Logger.info(str(type(prev_reports)) + \", \" + str(len(prev_reports)))\n            j = 0\n            for prev_report in prev_reports:\n                Logger.info(str(prev_report) + \", \" + str(j))\n                if prev_report[\"tag\"] == \"PRE_ISSU\":\n                    Logger.info(\"found pre-check section of report\")\n                    return prev_report\n                else:\n                    Logger.info(\"report is not pre-issu\")\n                j += 1\n        except Exception as e:\n            Logger.error(\"failed to query report, \" + str(i) + \", \" + str(e))\n        i += 1\n    Logger.error(\"previous report count limit hit\")\n\n\ndef generateReport(dictionaryObj):\n    Logger.info(\"func generateReport\")\n    Logger.info(str(sys.version))\n    Logger.info(\"*** Swift for DCNM, version \" + __version__ + \" ***\")\n    Logger.info(\"Report dictionary object: {}\".format(dictionaryObj))\n    Logger.info(\"Tag: \" + tag)\n\n    user_params = {}\n\n\n    try:\n        user_params[\"DETAILED_REPORT\"] = DETAILED_REPORT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"SUPPRESS_ALL_TEST_FAILURES\"] = SUPPRESS_ALL_TEST_FAILURES\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"DUAL_SUP\"] = DUAL_SUP\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_VPC_0\"] = VALIDATE_VPC_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_ARP_0\"] = VALIDATE_ARP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_OSPF_0\"] = VALIDATE_OSPF_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_ISIS_0\"] = VALIDATE_ISIS_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_BGP_0\"] = VALIDATE_BGP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_HSRP_0\"] = VALIDATE_HSRP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_STP_0\"] = VALIDATE_STP_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"UPTIME_LIMIT_DAYS\"] = UPTIME_LIMIT_DAYS\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"MTS_BUFFER_LIMIT\"] = MTS_BUFFER_LIMIT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"CPU_LOAD_LIMIT\"] = CPU_LOAD_LIMIT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_PIM_0\"]= VALIDATE_PIM_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"INBAND_RATE_LIMIT\"] = INBAND_RATE_LIMIT\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_LCND_0\"] = VALIDATE_LCND_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"VALIDATE_SYSLOG_0\"] = VALIDATE_SYSLOG_0\n    except Exception as e:\n        Logger.warn(str(e))\n\n    try:\n        user_params[\"LACP_FAST_SHUT\"] = LACP_FAST_SHUT\n    except Exception as e:\n        Logger.warn(str(e))\n\n\n    user_params[\"PRE_POST_TAG\"] = tag\n\n    pre_issu_pb = [\n                    {\"func\": \"val_precheck\",\n                     \"desc\": \"Precheck\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for Cli responsiveness\", \"Kernel uptime check\"]\n                    },\n\n                    {\"func\": \"val_license_usage\",\n                     \"desc\": \"Validate License Usage\",\n                     \"params\": {},\n                     \"criteria\": [\"Check license usage, Honor or Expired\"]\n                    },\n\n                    {\"func\": \"val_log_logfile\",\n                     \"desc\": \"Validate Logging Logfile\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for Sev1/Sev2 log events\"]\n                    },\n\n                    {\"func\": \"val_sys_reset_reason\",\n                     \"desc\": \"Check previous reset-reasons\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_proc_cores\",\n                     \"desc\": \"Validate Process Cores\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for core files created in the last 30 days\"]\n                    },\n\n                    {\"func\": \"val_redundancy\",\n                     \"desc\": \"Validate Supervisor Redundancy\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if Active/Standby supervisors in SSO state\"]\n                    },\n\n                    {\"func\": \"val_inband_rate\",\n                     \"desc\": \"Validate Inband Rate\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if in-band packet rates are < \" \\\n                        + str(user_params[\"INBAND_RATE_LIMIT\"])]\n                    },\n\n                    {\"func\": \"val_lcnd_stats\",\n                     \"desc\": \"Validate LCND Stats\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if LCND stats has Rx/Tx drops > 100\"]\n                    },\n\n                    {\"func\": \"val_mod_exception\",\n                     \"desc\": \"Validate Module Exceptions\",\n                     \"params\": {},\n                     \"criteria\": [\"Validate show module and module exceptions\"]\n                    },\n\n                    {\"func\": \"val_gold\",\n                     \"desc\": \"Validate GOLD\",\n                     \"params\": {},\n                     \"criteria\": [\"Check module GOLD (Online diags have Failed)\"]\n                    },\n\n                    {\"func\": \"val_bootflash_health\",\n                     \"desc\": \"Validate Bootflash Health\",\n                     \"params\": {\"size\": \"2000\"},\n                     \"criteria\": [\"Check 2GB free and bootflash is RW\"]\n                    },\n\n                    {\"func\": \"val_system_resources\",\n                     \"desc\": \"Validate System Resources\",\n                     \"params\": {},\n                     \"criteria\": [\"Check CPU load < \" + user_params[\"CPU_LOAD_LIMIT\"] \\\n                        + \" and memory status OK\"]\n                    },\n\n                    {\"func\": \"val_mts_buffers\",\n                     \"desc\": \"Validate MTS Buffer Usage\",\n                     \"params\": {},\n                     \"criteria\": [\"Check each SAP has < \" + user_params[\"MTS_BUFFER_LIMIT\"] \\\n                        + \" entries in receive queue\"]\n                    },\n\n                    {\"func\": \"val_environment\",\n                     \"desc\": \"Validate Environment\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Fans, PSUs are not in failed state\"]\n                    },\n\n                    {\"func\": \"val_hw_ratelimiter\",\n                     \"desc\": \"Validate Hardware Rate-Limiter\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_copp\",\n                     \"desc\": \"Validate CoPP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_vpc\",\n                     \"desc\": \"Validate vPC\",\n                     \"params\": {},\n                     \"criteria\": [\"Check vPC peer-link\", \"Check vPC peer keepalive\",\n                        \"Check Pre/Post vPC status\"]\n                    },\n\n                    {\"func\": \"val_stp_tcn\",\n                     \"desc\": \"Validate STP Stability\",\n                     \"params\": {},\n                     \"criteria\": [\"Check all STP trees last TCN occurred > \" \\\n                        + user_params[\"VALIDATE_STP_0\"] + \" hrs\"]\n\n                    },\n\n                    {\"func\": \"val_stp_impact\",\n                     \"desc\": \"Validate STP Impact\",\n                     \"params\": {},\n                     \"criteria\": [\"Check STP impact results\"]\n                    },\n\n                    {\"func\": \"val_stp_trees\",\n                     \"desc\": \"Validate STP Trees\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post STP tree data\"]\n                    },\n\n                    {\"func\": \"val_hsrp\",\n                     \"desc\": \"Validate HSRP\",\n                     \"params\": {},\n                     \"criteria\": [\"Check HSRP Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_ospf_nbr\",\n                     \"desc\": \"Validate OSPF Neighbors\",\n                     \"params\": {},\n                     \"criteria\": [\"Check OSPF neighborships are up\", \"Validate OSPF Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_ospf_intf\",\n                     \"desc\": \"Validate OSPF Interfaces\",\n                     \"params\": {},\n                     \"criteria\": [\"Check OSPF Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_bgp\",\n                     \"desc\": \"Validate BGP\",\n                     \"params\": {},\n                     \"criteria\": [\"Check BGP neighborships are up\", \"Validate BGP Pre/Post state\"]\n                    },\n\n                    # {\"func\": \"val_isis\",\n                    #  \"desc\": \"Validate IS-IS\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    {\"func\": \"val_pim\",\n                     \"desc\": \"Validate PIM\",\n                     \"params\": {},\n                     \"criteria\": [\"Check PIM Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_bfd\",\n                     \"desc\": \"Validate BFD\",\n                     \"params\": {},\n                     \"criteria\": [\"Check BFD Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_lacp\",\n                     \"desc\": \"Validate LACP\",\n                     \"params\": {},\n                     \"criteria\": [\"Check LACP Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_nve\",\n                     \"desc\": \"Validate NVE\",\n                     \"params\": {},\n                     \"criteria\": [\"Check NVE interface Pre/Post\"]\n                    },\n\n                    {\"func\": \"val_arp\",\n                     \"desc\": \"Validate ARP Completion Ratio\",\n                     \"params\": {},\n                     \"criteria\": [\"Check ARP Incomplete/Complete ratio < \" \\\n                        + user_params[\"VALIDATE_ARP_0\"]]\n                    },\n\n                    {\"func\": \"val_udld\",\n                     \"desc\": \"Validate UDLD\",\n                     \"params\": {},\n                     \"criteria\": [\"Validate UDLD Pre/Post state\"]\n                    },\n\n                    {\"func\": \"val_intf\",\n                     \"desc\": \"Validate Show Interface\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post interface state\"]\n                    },\n\n                    {\"func\": \"val_intf_trunk\",\n                     \"desc\": \"Validate Show Interface Trunk\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post interface trunk state\"]\n                    },\n\n                    {\"func\": \"val_port_channel\",\n                     \"desc\": \"Validate Port-Channels\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post port-channel member state\"]\n                    },\n\n                    {\"func\": \"val_ipv4_route\",\n                     \"desc\": \"Validate v4 Routing\",\n                     \"params\": {},\n                     \"criteria\": [\"Check IPv4 Pre/Post Route/Path count\"]\n                    },\n\n                    {\"func\": \"val_ipv6_route\",\n                     \"desc\": \"Validate v6 Routing\",\n                     \"params\": {},\n                     \"criteria\": [\"Check IPv6 Pre/Post Route/Path count\"]\n                    },\n\n                    {\"func\": \"val_cdp_nbrs\",\n                     \"desc\": \"Validate CDP Neighbors\",\n                     \"params\": {},\n                     \"criteria\": [\"Check Pre/Post CDP neighbors\"]\n                    },\n\n                    {\"func\": \"val_kim_cc\",\n                     \"desc\": \"Validate KIM Consistency Checker\",\n                     \"params\": {},\n                     \"criteria\": [\"Check if Kernel Interface Manager CC has passed\"]\n                    },\n\n                    # {\"func\": \"val_consistency\",\n                    #  \"desc\": \"Validate Consistency\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    # {\"func\": \"val_dme\",\n                    #  \"desc\": \"Validate DME\",\n                    #  \"params\": {},\n                    #  \"criteria\": [\"Check Pre/Post DME database\"]\n                    # },\n\n                    # {\"func\": \"run_lacp_fast_shut_no_shut\",\n                    #  \"desc\": \"Run LACP Fast Shutdown\",\n                    #  \"params\": {},\n                    #  \"criteria\": [\"Check for LACP fast mode interfaces and shutdown\"]\n                    # },\n\n\n    ]\n\n    post_issu_pb = [\n\n                   {\"func\": \"val_precheck\",\n                     \"desc\": \"Precheck\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"run_lacp_fast_shut_no_shut\",\n                     \"desc\": \"Run LACP Fast Shutdown\",\n                     \"params\": {},\n                     \"criteria\": [\"Check for LACP fast mode interfaces and no shutdown\"]\n                    },\n\n                    {\"func\": \"val_license_usage\",\n                     \"desc\": \"Validate License Usage\",\n                     \"params\": {},\n                     \"criteria\": [\"Check license usage\"]\n                    },\n\n                    {\"func\": \"val_log_logfile\",\n                     \"desc\": \"Validate Logging Logfile\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_sys_reset_reason\",\n                     \"desc\": \"Validate Onboard Uptime\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_proc_cores\",\n                     \"desc\": \"Validate Process Cores\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_redundancy\",\n                     \"desc\": \"Validate Supervisor Redundancy\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_inband_rate\",\n                     \"desc\": \"Validate Inband Rate\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_lcnd_stats\",\n                     \"desc\": \"Validate LCND Stats\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_mod_exception\",\n                     \"desc\": \"Validate Module Exceptions\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_gold\",\n                     \"desc\": \"Validate GOLD\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_bootflash_health\",\n                     \"desc\": \"Validate Bootflash Health\",\n                     \"params\": {\"size\": \"2000\"},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_system_resources\",\n                     \"desc\": \"Validate System Resources\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_mts_buffers\",\n                     \"desc\": \"Validate MTS Buffer Usage\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_environment\",\n                     \"desc\": \"Validate Environment\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_hw_ratelimiter\",\n                     \"desc\": \"Validate Hardware Rate-Limiter\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_copp\",\n                     \"desc\": \"Validate CoPP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_vpc\",\n                     \"desc\": \"Validate vPC\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_stp_tcn\",\n                     \"desc\": \"Validate STP Stability\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_stp_impact\",\n                     \"desc\": \"Validate STP Impact\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_stp_trees\",\n                     \"desc\": \"Validate STP Trees\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_hsrp\",\n                     \"desc\": \"Validate HSRP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ospf_nbr\",\n                     \"desc\": \"Validate OSPF Neighbors\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ospf_intf\",\n                     \"desc\": \"Validate OSPF Interfaces\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_bgp\",\n                     \"desc\": \"Validate BGP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    # {\"func\": \"val_isis\",\n                    #  \"desc\": \"Validate IS-IS\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    {\"func\": \"val_pim\",\n                     \"desc\": \"Validate PIM\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_bfd\",\n                     \"desc\": \"Validate BFD\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_lacp\",\n                     \"desc\": \"Validate LACP\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_nve\",\n                     \"desc\": \"Validate NVE\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_arp\",\n                     \"desc\": \"Validate ARP Completion Ratio\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_udld\",\n                     \"desc\": \"Validate UDLD\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_intf\",\n                     \"desc\": \"Validate Show Interface\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_intf_trunk\",\n                     \"desc\": \"Validate Show Interface Trunk\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_port_channel\",\n                     \"desc\": \"Validate Port-Channels\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ipv4_route\",\n                     \"desc\": \"Validate v4 Routing\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_ipv6_route\",\n                     \"desc\": \"Validate v6 Routing\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_cdp_nbrs\",\n                     \"desc\": \"Validate CDP Neighbors\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    {\"func\": \"val_kim_cc\",\n                     \"desc\": \"Validate KIM Consistency Checker\",\n                     \"params\": {},\n                     \"criteria\": []\n                    },\n\n                    # {\"func\": \"val_consistency\",\n                    #  \"desc\": \"Validate Consistency\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    # {\"func\": \"val_dme\",\n                    #  \"desc\": \"Validate DME\",\n                    #  \"params\": {},\n                    #  \"criteria\": []\n                    # },\n\n                    # {\"func\": \"run_lacp_fast_shut_no_shut\",\n                    #  \"desc\": \"Run LACP Fast Shutdown/Recovery\",\n                    #  \"params\": {},\n                    #  \"criteria\": [\"Check for LACP fast mode interfaces and no shutdown\"]\n                    # },\n\n    ]\n\n\n\n    if \"PRE_ISSU\" in tag:\n        report = Report(\"Pre-ISSU Report\")\n\n        Logger.info(\"pre-issu nxos reporting\")\n        nx = NXModel(dictionaryObj, report, user_params)\n        step_results = checkPreUpgrade(nx, pre_issu_pb)\n        Logger.info(str(step_results))\n\n        Logger.info(\"pre-issu generic reporting\")\n        grm = GenericReportModel(dictionaryObj, nx.report)\n        return grm.checkISSUPreUpgrade(step_results, pre_issu_pb)\n\n    elif \"POST_ISSU\" in tag:\n        report = Report(\"Post-ISSU Report\")\n\n        Logger.info(\"post-issu nxos reporting\")\n        pre_report = getPreIssuReport(dictionaryObj)\n\n        nx = NXModel(dictionaryObj, report, user_params, pre_report)\n        step_results = checkPostUpgrade(nx, post_issu_pb)\n        Logger.info(str(step_results))\n        Logger.info(\"post-issu generic reporting\")\n        grm = GenericReportModel(dictionaryObj, nx.report)\n        return grm.checkISSUPostUpgrade(step_results, post_issu_pb)\n\n    else:\n        Logger.error(\"Missing tag value for report creation\")\n        respObj = WrappersResp.getRespObj()\n        respObj.setFailureRetCode()\n        respObj.setValue(\"Missing tag value for report creation.\")\n        return respObj\n\n\ndef validate(context):\n    Logger.info(\"func validate\")\n    Logger.info(str(context))\n    respObj = WrappersResp.getRespObj()\n    #validation logic ahead of script operation\n    respObj.setSuccessRetCode()\n    return respObj\n##\n","fileName":"custom_swift_issu.template","templateType":"REPORT","contentType":"PYTHON","templateSubType":"UPGRADE","_implements":"","dependencies":"","referenceCount":0,"published":false,"timestamp":"2023-08-18 08:10:43","importedTemplates":null,"implements":""}